#!/usr/bin/env ruby

n = ARGV[0].to_i

if n == 0
  puts "Usage: ./bin/generate n"
  exit 1
end

# Enable to only search for palindromic superpermutations.
PALINDROMIC = false

# If the search has been run before, this array can be set to the solutions to
# previous subproblems so that we can continue where we left off.
MAX_PERMS = []

def generate(n)
  set_permutation_ids(n)

  print_main(n)
  print_new_best_depth_fn

  # For each permutation of n digits.
  1.upto(n).to_a.permutation do |perm|
    print_node_pre(perm)

    # For an increasing number of wasted characters. This limits the maximum
    # number of wasted characters to n - 2, which means there must be _some_
    # overlap of characters between permutations - they are not disjoint.
    0.upto(n - 2) do |waste|
      print_waste_a(perm, waste) unless waste.zero?

      # Recursively generate the list of next permutations that can be reached
      # from this one if the given number of characters are wasted.
      recursively_generate(n, perm, waste) do |next_perm|
        next if PALINDROMIC && perm == next_perm.reverse

        # There's no point adding edges that go back to the start node (123456).
        next if next_perm.sort == next_perm

        print_edge(perm, next_perm)
      end

      print_waste_b(perm, waste) if waste.zero?
    end

    print_node_post(perm)
  end

  print_globals
end

def recursively_generate(n, string, remaining_waste, &block)
  # For each digit.
  1.upto(n) do |digit|

    # Add the digit to the end of the string we've built so far.
    new_string = string + [digit]

    # Get the last n characters from the string.
    tail = new_string[-n..]

    # Check if this digit added a new permutation to the string.
    added_a_permutation = tail.uniq.size == n

    # If we added a permutation too soon, don't expand this string any further.
    # This ensures no permutation appears more than once in the final string.
    next if added_a_permutation && remaining_waste > 0

    # If we've wasted enough characters, we can now yield the tail of the
    # string, but only if it just added a permutation.
    if remaining_waste == 0
      yield tail if added_a_permutation
    else
      # Otherwise, call recursively, decrementing the remaining waste.
      recursively_generate(n, new_string, remaining_waste - 1, &block)
    end
  end
end

# Give each permutation a unique id (index).
def set_permutation_ids(n)
  @permutation_ids = {}

  1.upto(n).to_a.permutation do |perm|
    @permutation_ids[perm] = @permutation_ids.size
  end
end

def print_main(n)
  start_perm = 1.upto(n).to_a.join

  num_perms = 1.upto(n).inject(:*)
  num_perms /= 2 if PALINDROMIC

  puts <<~ASM
    .global _main
    .align 2

    sysarg_0   .req x0
    sysarg_1   .req x1
    sysarg_2   .req x2

    tmp_0      .req x0
    tmp_1      .req x1
    tmp_2      .req x2

    visited_0  .req x3
    visited_1  .req x4
    visited_2  .req x5
    visited_3  .req x6
    visited_4  .req x7
    visited_5  .req x8
    visited_6  .req x9
    visited_7  .req x10
    visited_8  .req x11
    visited_9  .req x12
    visited_10 .req x13
    visited_11 .req x14

    rem_waste  .req x15

    sys_call   .req x16

    tmp_3      .req x16

    max_waste  .req x17

    best_depth .req x18

    max_perms .req x29

    return_adr .req x30

    _main:
      adrp max_perms, max_perms_array@PAGE
      add max_perms, max_perms, max_perms_array@PAGEOFF
      add max_perms, max_perms, #{n * 64}

      mov visited_0, 0
      mov visited_1, 0
      mov visited_2, 0
      mov visited_3, 0
      mov visited_4, 0
      mov visited_5, 0
      mov visited_6, 0
      mov visited_7, 0
      mov visited_8, 0
      mov visited_9, 0
      mov visited_10, 0
      mov visited_11, 0

      mov tmp_0, 0
      mov max_waste, 0
  ASM

  MAX_PERMS.each do |p|
    puts
    puts "  mov tmp_0, #{p}"
    puts "  str tmp_0, [max_perms, max_waste, lsl 3]"
    puts "  add max_waste, max_waste, 1"
  end

  puts <<~ASM
    \

      sub best_depth, sp, tmp_0, lsl 4
      mov rem_waste, max_waste

      next_subproblem:

      bl visit_#{start_perm}

      sub tmp_0, sp, best_depth
      lsr tmp_0, tmp_0, 4

      str tmp_0, [max_perms, max_waste, lsl 3]

      mov x24, tmp_0
      mov x25, 0

      print:
      mov sys_call, 4
      mov sysarg_0, 1
      adr sysarg_1, dot
      mov sysarg_2, 1
      svc 0

      add x25, x25, 1
      cmp x25, x24
      b.ne print

      mov sys_call, 4
      mov sysarg_0, 1
      adr sysarg_1, newline
      mov sysarg_2, 1
      svc 0

      add max_waste, max_waste, 1
      mov rem_waste, max_waste

      cmp x24, #{num_perms}
      b.ne next_subproblem

      mov sys_call, 1
      mov sysarg_0, 0
      svc 0
  ASM
end

def print_new_best_depth_fn
  puts <<~ASM


    new_best_depth_found:
      mov best_depth, tmp_0
      mov x28, tmp_0

      print_chevron:
      mov sys_call, 4
      mov sysarg_0, 1
      adr sysarg_1, chevron
      mov sysarg_2, 1
      svc 0

      adds x28, x28, 16
      b.lt print_chevron

      mov sys_call, 4
      mov sysarg_0, 1
      adr sysarg_1, newline
      mov sysarg_2, 1
      svc 0

      mov tmp_0, best_depth

      mov best_depth, sp
      ret
  ASM
end

def print_globals
  puts <<~ASM


    chevron:
      .ascii ">"
      .align 4

    dot:
      .ascii "."
      .align 4

    newline:
      .ascii "\n"

    .data
    max_perms_array:
      .fill 200, 8, 0
  ASM
end

# Print some assembly for a permutation node we can visit in the graph.
def print_node_pre(perm)
  # Look up the bit we're using to record whether we've visited perm.
  bitset_index, _bit_index, mask = bitset_position(perm)

  puts <<~ASM


    visit_#{perm.join}:
      stp return_adr, rem_waste, [sp, -16]!

      eor visited_#{bitset_index}, visited_#{bitset_index}, #{mask}
  ASM
end

# Print some assembly when we move on to the next number of wasted characters.
def print_waste_a(perm, waste)
  puts
  puts "  sub rem_waste, rem_waste, 1"
  puts
  puts "  sub tmp_0, sp, best_depth"
  puts "  ldr tmp_1, [max_perms, rem_waste, lsl 3]"
  puts
  puts "  cmp tmp_0, tmp_1, lsl 4"
  puts "  b.ge unwind_#{perm.join}"
end

def print_waste_b(perm, waste)
  puts
  puts "  subs tmp_0, sp, best_depth"
  puts
  puts "  b.ge no_improvement_#{perm.join}"
  puts "  bl new_best_depth_found"
  puts "  no_improvement_#{perm.join}:"
end

# Print some assembly for an edge that leads to another permutation in the graph.
def print_edge(perm, next_perm)
  label_name = "after_#{perm.join}_#{next_perm.join}"

  # Look up the bit we're using to record whether we've visited next_perm.
  bitset_index, bit_index, mask = bitset_position(next_perm)

  puts <<-ASM

  tbnz visited_#{bitset_index}, #{bit_index}, #{label_name}
  bl visit_#{next_perm.join}
  #{label_name}:
  ASM
end

# Print the remainder of the assembly for a node that unwinds the call stack.
def print_node_post(perm)
  # Look up the bit we're using to record whether we've visited perm.
  bitset_index, _bit_index, mask = bitset_position(perm)

  puts <<-ASM

  unwind_#{perm.join}:
  eor visited_#{bitset_index}, visited_#{bitset_index}, #{mask}
  ldp return_adr, rem_waste, [sp], 16
  ret
  ASM
end

# The assembly program uses CPU registers to record which permutatons we've
# visited. It treats a series of registers as a bitset we can index into.
# Some instructions use this index and some use 2^index so we return both.
def bitset_position(perm)
  if PALINDROMIC && perm.first > perm.last
    position = @permutation_ids[perm.reverse]
  else
    position = @permutation_ids[perm]
  end

  bitset_index, bit_index = position.divmod(64)
  bitmask = 2 ** bit_index

  [bitset_index, bit_index, bitmask]
end

generate(n)
